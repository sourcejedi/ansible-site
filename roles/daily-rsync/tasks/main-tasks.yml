# WORK IN PROGRESS

# NOTE 1: looking at some parts you might get the impression this is
# generalized and configurable, but it is not really.  Correctly passing lists
# into bash is annoying.  For now, I hard-coded the list of home directories
# to back up.

# The variables `daily_rsync__server` and `daily_rsync__server_addresses`
# are used to test the role in a VM.

# NOTE 2: `daily_rsync__server_addresses` was added with Wi-Fi in mind.
# But if you really wanted to use this for Wi-Fi or laptops, it is not
# robust enough so far.

# NOTE 3: It is a good idea to install a mail setup, to catch cron errors.
# See roles/deb-mail/

# This task list is unusual for me:
# it runs tasks on two different hosts.


# Client - generate ssh keypair, read the public key into a variable #

- name: Client - install ssh, rsync, cron
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - openssh-client
    - rsync
    - cron

- name: Client - create directory for role file(s)
  file:
    dest: /ansible-managed/daily-rsync/
    state: directory
    mode: "700"  # directory contains key material
    
# 1/2 Run command task conditionally, to provide accurate "changed" status
- name: Client - ensure | ssh_key is created
  command: ssh-keygen -t ed25519 -N "" -f /ansible-managed/daily-rsync/ssh_key
  args:
    creates: /ansible-managed/daily-rsync/ssh_key

# 2/2 The condition must now hold.  This "fixes" ansible check mode.
- name: Client - check  | ssh_key is created
  command: test -f /ansible-managed/daily-rsync/ssh_key
  changed_when: False
  check_mode: False

- name: Client - read ssh public key
  slurp:
    src: /ansible-managed/daily-rsync/ssh_key.pub
  register: sshkey

# Server #

- name: Server - install rsync, rdiff-backup, at
  delegate_to: "{{ daily_rsync__server }}"
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - rsync
    - rdiff-backup
  run_once: True

# NOTE: We need to use the daily_rsync__dir variable from the *server*.
# Unfortunately this expression is horribly long.  We copy the
# variable from the server to the client.  So the expression ends up
# looking horribly misleading!
#
- name: Server - read directory variable
  set_fact:
    daily_rsync__dir:
      "{{ hostvars[daily_rsync__server]['daily_rsync__dir'] }}"

- name: Server - create directory
  delegate_to: "{{ daily_rsync__server }}"
  file:
    dest: "{{ daily_rsync__dir }}"
    state: directory
  run_once: True

- name: Server - create configs directory
  delegate_to: "{{ daily_rsync__server }}"
  file:
    dest: /ansible-managed/daily-rsync-clients/
    state: directory
  run_once: True

- name: Server - create per-client user
  delegate_to: "{{ daily_rsync__server }}"
  user:
    state: present
    name: "rsyncbak-{{ inventory_hostname }}"
    home: "/ansible-managed/daily-rsync-clients/{{ inventory_hostname }}"
    comment: "SSH login for remote backup client,,,"
    groups: sshlogin  # roles/openssh-server

    # password_lock is only added in Ansible 2.6.
    # Doing this manually will warn
    # "The input password appears not to have been hashed.
    # The 'password' argument must be encrypted for this module to work properly."
    # User module does not support "warn: no".
    password: "!!"

- name: Server - create per-client directories
  delegate_to: "{{ daily_rsync__server }}"
  file:
    dest: "{{ item }}"
    state: directory
    owner: "rsyncbak-{{ inventory_hostname }}"
    mode: "700"
  with_items:
   - "{{ daily_rsync__dir }}/{{ inventory_hostname }}"
   - "{{ daily_rsync__dir }}/{{ inventory_hostname }}/tmp"
   - "{{ daily_rsync__dir }}/{{ inventory_hostname }}/data"

- name: Server - create per-client lockfile
  delegate_to: "{{ daily_rsync__server }}"
  file:
    dest: "{{ daily_rsync__dir }}/{{ inventory_hostname }}/lock"
    state: directory
    owner: "rsyncbak-{{ inventory_hostname }}"
    mode: "700"

- name: Server - create per-client rsyncd.conf
  delegate_to: "{{ daily_rsync__server }}"
  template:
    src: server/rsyncd.conf.j2
    dest: "/ansible-managed/daily-rsync-clients/{{ inventory_hostname }}/rsyncd.conf"

- name: Server - install per-client ssh server scripts
  delegate_to: "{{ daily_rsync__server }}"
  template:
    src: "server/{{ item }}"
    dest: "/ansible-managed/daily-rsync-clients/{{ inventory_hostname }}/{{ item }}"
    mode: 0755
  with_items:
    - "ssh_server.sh"
    - "rdiff-backup.sh"

# Server - requires information from client #

- name: Server - install per-client authorized_key
  delegate_to: "{{ daily_rsync__server }}"
  authorized_key:
    exclusive: yes
    user: "rsyncbak-{{ inventory_hostname }}"
    key: "{{ sshkey.content | b64decode }}"
    key_options: 'command="/ansible-managed/daily-rsync-clients/{{ inventory_hostname }}/ssh_server.sh",restrict,no-port-forwarding,no-agent-forwarding,no-X11-forwarding,no-pty,no-user-rc'

# Client #

- name: Client - create known-hosts file for server addresses
  template:
    src: client/known_hosts.j2
    dest: /ansible-managed/daily-rsync/known_hosts

- name: Client - create ssh_config
  template:
    src: client/ssh_config
    dest: /ansible-managed/daily-rsync/ssh_config

- name: Client - create rsync.exclude
  template:
    src: client/rsync.exclude
    dest: "/ansible-managed/daily-rsync/rsync.exclude"
    
- name: Client - install cron job for rsync
  template:
    src: client/cron.daily.j2
    dest: /etc/cron.daily/{{ daily_rsync__cron_prefix }}local-rsync
    mode: "755"
