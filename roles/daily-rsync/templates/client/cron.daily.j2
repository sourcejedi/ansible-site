#!/bin/bash

{#
 # jinja2 template of a bash script.
 # bash is already hateful; this combination is probably better avoided :-P.
 #}

readonly SSH_USER=rsyncbak-{{ inventory_hostname | quote}}

assert_nospace() {
	local NAME="$1" VALUE="$2"

	local PATTERN="[[:space:]]+"
	if [[ $2 =~ $PATTERN ]]; then
		printf 'fatal: %s contains space: "%s"\n' "$NAME" "$VALUE"
		exit 1
	fi
}

try_rsync() {
	local SERVER="$1" SRC="$2" DST="$3"

	assert_nospace \$SSH_USER "$SSH_USER"
	local RSH="ssh -F /ansible-managed/daily-rsync/ssh_config -l ${SSH_USER}"

	nice rsync --rsh="$RSH" \
		-a --delete --partial \
		--exclude-from /ansible-managed/daily-rsync/rsync.exclude \
		--delete-excluded \
		"$SRC" "$SERVER"::"backup"/"$DST"
}

# Return false if unreachable, or any other error.
try_address() {
	local SERVER="$1"

	printf '== Trying backup server %s ==\n' "$SERVER" &&

	try_rsync "$SERVER" /home/mike/ mike &&
	try_rsync "$SERVER" /home/sheena/ sheena &&

	try_rsync "$SERVER" /home/.shared-internal/ jenkins-shared &&
	try_rsync "$SERVER" /home/.shared-separate-internal/Photos/ jenkins-photos &&

	# jenkins-music is not included here

	ssh -F /ansible-managed/daily-rsync/ssh_config -l "$SSH_USER" \
	    "$SERVER" snapshot &&

	printf '== Backup succeeded ==\n'
}

cleanup_script() {
	if ! /ansible-managed/daily-rsync/cleanup_script; then
		echo "Failed in cleanup_script"
		return 1
	fi
}
prepare_script() {
	if ! /ansible-managed/daily-rsync/prepare_script; then
		echo "Failed in prepare_script"
		return 1
	fi
}

__main() (
	exec >/var/log/local-daily-rsync 2>&1 || return 1

	cleanup_script || return 1
	prepare_script || return 1

{% for address in daily_rsync__server_addresses %}
	try_address {{ address | quote}} ||
{% endfor %}
		false  # all addresses failed
	RC=$?

	cleanup_script || return 1
	return $RC
)

# Lock against cleanup_script, launched at boot time from cron.d
exec 3>/ansible-managed/daily-rsync/lock &&
flock 3 &&
if ! __main; then
	cat /var/log/local-daily-rsync
	exit 1
fi
