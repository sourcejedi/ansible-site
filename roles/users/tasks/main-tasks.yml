- name: RedHat-compatible sudo package?
  when: ansible_os_family == "RedHat"
  set_fact: sudo_group="wheel"

- name: Debian-compatible sudo package?
  when: ansible_os_family == "Debian"
  set_fact: sudo_group="sudo"

- name: Operating system is supported
  assert:
    that: sudo_group is defined

- name: Install sudo
  package: name=sudo state=present


- name: Set HOME_MODE in login.defs (RedHat)
  lineinfile:
    path: /etc/login.defs
    regexp: '^HOME_MODE(\s|$)'
    line: 'HOME_MODE 0700'
  when: ansible_os_family == "RedHat"
  register: user__mode_in_login_defs

- name: Set DIR_MODE in adduser.conf (Debian)
  lineinfile:
    path: /etc/adduser.conf
    regexp: '^DIR_MODE=.*'
    line: 'DIR_MODE=0700'
  when: ansible_os_family == "Debian"
  register: user__mode_in_adduser_conf

- name: Operating system is supported
  assert:
    that: user__mode_in_login_defs is defined or
          user__mode_in_adduser_conf is defined


- name: Create users
  user:
    state: present
    name: '{{ item.name }}'

    # I only use the name field. Set the rest of the GECOS blank.
    comment: '{{ (item.full_name | d(None) + ",,,") or omit }}'

    # Debian /etc/default/useradd: 'we use "sh" here because
    # useradd is a low level utility and should be as general
    # as possible'.
    shell: /bin/bash

    # admin users get sudo and read access to system logfiles.
    #
    # Don't remove groups!  Other modular roles want to add them
    # e.g. openssh-server, systemd-journal.
    append: true
    groups: '{{
              (([sudo_group, "adm"] if item.admin | d(false) else []) +
               []) | join(",")
            }}'
  with_items: '{{ users }}'
  loop_control:
    label: "{{ item.name }}"
  register: users__register

# For previously-created users
- name: Set permission mode of user home directories
  file:
    path: '{{ item }}'
    mode: '700'
  with_items: '{{ users__register.results | map(attribute="home") | list }}'
