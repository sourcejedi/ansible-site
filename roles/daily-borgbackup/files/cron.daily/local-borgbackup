#!/bin/bash
# Tested on Debian 9 "stretch", i.e. borgbackup-1.0.9

set -o nounset

readonly BORG_REPOS_DIR=/data/backup/borg

# Quick check
if ! ( mountpoint -q /data ||
       mountpoint -q /data/backup ||
       mountpoint -q /data/backup/bup )
then
	echo "Backup disk not mounted"
	exit 1
fi


# Show details when run from a terminal (idea stolen from bup).
# Otherwise, only show errors.
if tty >/dev/null; then
	readonly BORG_PROGRESS="--progress"
	readonly BORG_STATS="--stats --info"
else
	readonly BORG_PROGRESS=
	readonly BORG_STATS=
fi

# Write a log to show the time taken
log() {
	echo -- "$@" >> /var/log/local-borgbackup
}
log_date() {
	log "$(date --rfc-3339=seconds)"
}

# Log the start timestamp
log_start() {
	log_date
}
log_cmd() {
	local err=0

	"$@" || err=$?

	log "$*" || err=1
	log_date || err=1  # log time of completion

	return $err
}


# If the borg repo does not exist, create it - atomically.
# If interrupted, just leaves a small randomly-named directory lying around
borg_init() {
	local BORG_REPO="$1" &&

	if [ ! -e "$BORG_REPO" ]; then
		T=$(mktemp --dry-run "$BORG_REPO".tmp.XXXXXX) &&
		borg init --encryption=none "$T" &&

		# ~5M segment size (borg 1.0 default) is too small IMO.
		# Use ~500M (borg 1.1 default).
		sed -i "$T"/config -e 's/^max_segment_size = .*$/max_segment_size = 524288000/' &&

		mv "$T" "$BORG_REPO"
	fi &&

	# borg doesn't like renamed repos; we have to baby it.
	#
	# There's an easier fix in 1.1, which might even work before the rename
	# (so we don't end up overriding borg *after* the initial creation).
	# It would also avoid a warning which we have to suppress.
	# https://github.com/borgbackup/borg/issues/1910#issuecomment-354780246

	export BORG_REPO &&

	local BORG_RELOCATED_REPO_ACCESS_IS_OK=yes &&
	export BORG_RELOCATED_REPO_ACCESS_IS_OK &&

	# Make sure to delete "temp" archive,
	# in case previous run was interrupted.
	# Ignore failure, suppress errors.
	{ borg delete ::temp 2>/dev/null || true; } &&

	# Fire for effect.  But we still need to suppress the warning
	# from BORG_RELOCATED_REPO_ACCESS_IS_OK=yes.
	# If there is a fatal error, then retry to show the messages.
	{
		borg create ::temp /dev/null 2>/dev/null ||
		borg create ::temp /dev/null
	} &&

	# Clean up
	borg delete ::temp
}

backup_home() {
	local HOME_DIR="$1" &&
	local BORG_REPO="$2" &&

	export BORG_REPO &&

	borg_init "$BORG_REPO" &&

	# Exclusions:
	#
	# Firefox profile tends to churn a whole lot (but see below).
	#
	# Thunderbird has an index for searching messages, which shows up.
	# This is due to the size of the blocks borg uses (megabytes?),
	# although enabling compression helps a bit.
	# We're allowed to drop the index - it will be rebuilt.
	#
	# On Debian, there may be an icedove profile which is half-migrated
	# to thunderbird, but still uses the old location.
	#
	# Nowadays GNOME logs activity and indexes it, that shows up as well.
	#
	log_cmd borg create $BORG_PROGRESS $BORG_STATS '::{now}' -C lz4 \
		-x "$HOME_DIR" \
		--exclude "$HOME_DIR"/.cache \
		--exclude "$HOME_DIR"/.mozilla/firefox \
		--exclude "$HOME_DIR"/.thunderbird/*/global-messages-db.sqlite \
		--exclude "$HOME_DIR"/.icedove/*/global-messages-db.sqlite \
		--exclude "$HOME_DIR"/.local/share/zeitgeist/fts.index \
		--exclude "$HOME_DIR"/.local/share/tracker &&

	# Prune old backups to save space
	log_cmd borg prune $BORG_STATS \
		--keep-daily 21 --keep-weekly 6 \
		--keep-monthly 12 --keep-yearly -1
}

# Save bookmarkbackups from the firefox profile.
# Firefox Sync doesn't e.g. protect against malice,
# and I have a lot of bookmarks I want to keep.
backup_firefox_bookmarks() {
	local HOME_DIR="$1" &&
	local BORG_REPO="$2".firefox-bookmarks &&

	if [ ! -d "$HOME_DIR"/.mozilla ]; then
		return 0
	fi &&

	export BORG_REPO &&

	borg_init "$BORG_REPO" &&

	log_cmd borg create $BORG_PROGRESS $BORG_STATS '::{now}' \
		"$HOME_DIR"/.mozilla/firefox/*/bookmarkbackups &&

	log_cmd borg prune $BORG_STATS \
		--keep-daily 21 --keep-weekly 6 \
		--keep-monthly 12 --keep-yearly -1
}

# Note if any one backup step fails, we keep going.
# However an error should be printed, which works well for the cron job case.
# Also make sure to point out if there was an error (like rsync does :).
backup() {
	local err=0 || return

	backup_home "$1" "$2" ||
		err=1
	backup_firefox_bookmarks "$1" "$2" ||
		err=1

	return $err
}

main() {
	local err=0 || return

	log_start || return

	for i in mike sheena; do
		backup "/home/$i" "$BORG_REPOS_DIR/$i" ||
			err=1
	done

	backup /home/.shared-internal "$BORG_REPOS_DIR/jenkins-shared" ||
		err=1
	backup /home/.shared-separate-internal/Music "$BORG_REPOS_DIR/jenkins-music" ||
		err=1
	backup /home/.shared-separate-internal/Photos "$BORG_REPOS_DIR/jenkins-photos" ||
		err=1

# 	backup /home/jenkins-photos "$BORG_REPOS_DIR/jenkins-photos" ||
# 		err=1

	if ! [ $err == 0 ]; then
		echo
		echo "WARNING: an error occurred.  Some files may not be backed up."
		return $err
	fi
}
main
