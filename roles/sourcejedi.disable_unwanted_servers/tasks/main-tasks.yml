- name: "Check for disable_service_* configuration error"
  assert:
    that: not error_services
    msg: "Bad config.  Should evaluate to True, False, or None.  {{ error_services }}"


### Special case for rpcbind  - rpcbind.socket.  Code copied from next section ###

# systemd module refuses to mask units which do not exist
- name: "Mask rpcbind.socket"
  file:
    path: /etc/systemd/system/{{ item }}.socket
    state: link
    src: /dev/null
  with_items: "{{ [ 'rpcbind' ] if disable_service_rpcbind else [] }}"

# "fix" check mode

- name: "rpcbind.socket must be masked, for a later task"
  file:
    path: "/etc/systemd/system/{{ item }}.socket"
    state: link
    src: /dev/null
  register: disable_unwanted_servers__mask
  failed_when: disable_unwanted_servers__mask.changed
  with_items: "{{ [ 'rpcbind' ] if disable_service_rpcbind else [] }}"

# Try to disable the unit if it is enabled.  Otherwise systemd will
# warn about the mask at boot time.
#
# Ansible 2.5 does not disable masked units correctly.
# (`systemctl disable` does).
# This hack makes a reasonable assumption that enabling foo.socket
# adds it as a dependency of sockets.target.
#
# (Disabling units does *not* make the mask redundant.  The mask
# stops the unit being enabled when it is installed, in case
# the unit has not been installed yet, and it gets pulled in later
# when the sysadmin installs another package).

- name: "Disable rpcbind.socket"
  file:
    path: "/etc/systemd/system/sockets.target.wants/{{ item }}.socket"
    state: absent
  with_items: "{{ [ 'rpcbind' ] if disable_service_rpcbind else [] }}"

# ansible seems happy to stop services which are masked though :)

- name: "Reload systemd config files"
  systemd:
    daemon_reload: yes

    # Ansible 2.2 doesn't let me split out daemon_reload as a separate task.
    # Request that systemd be started.
    name: "init.scope"
    state: started

- name: "Stop rpcbind.socket"
  systemd:
    name: "{{ item }}.socket"
    state: stopped
  with_items: "{{ [ 'rpcbind' ] if disable_service_rpcbind else [] }}"


- name: "Test if wanted rpcbind.socket exists (yet)"
  command: "systemctl cat {{ item }}.socket"
  register: disable_unwanted_servers__exist
  check_mode: no
  changed_when: False
  failed_when: disable_unwanted_servers__exist.rc not in [0, 1]
  with_items: "{{ [ 'rpcbind' ] if not disable_service_rpcbind else [] }}"

- name: "Find wanted rpcbind.socket which already exists"
  set_fact:
    disable_unwanted_servers__reenable:
      "{{ disable_unwanted_servers__exist.results
              | selectattr('rc', 'equalto', 0) 
              | map(attribute='item')
              | list }}"
  
- name: "Remove mask for wanted rpcbind.socket"
  systemd:
    name: "{{ item }}.socket"
    masked: no
  with_items: "{{ disable_unwanted_servers__reenable }}"

# After removing the mask, the service might no longer exist

- name: "Re-test if wanted rpcbind.socket exists (yet)"
  command: "systemctl cat {{ item }}.socket"
  register: disable_unwanted_servers__exist
  check_mode: no
  changed_when: False
  failed_when: disable_unwanted_servers__exist.rc not in [0, 1]
  with_items: "{{ disable_unwanted_servers__reenable }}"

- name: "Find wanted rpcbind.socket which already exists"
  set_fact:
    disable_unwanted_servers__reenable:
      "{{ disable_unwanted_servers__exist.results
              | selectattr('rc', 'equalto', 0) 
              | map(attribute='item')
              | list }}"
  
# I see this one does nothing for sysvinit services.
# The disable task doesn't do anything for them either.
# So it all still works... and I don't see the warning
# about masked services either, so it seems to be OK.
#
# Although, as a result, it might look a bit odd
# if you look at exactly which tasks are "changed" :-).
#
- name: "Enable rpcbind.socket"
  systemd:
    name: "{{ item }}.socket"
    enabled: yes
  with_items: "{{ disable_unwanted_servers__reenable }}"
  
# Do not start rpcbind.socket.
# It will fail if rpcbind.service is masked.
# When we start rpcbind.service, it will start rpcbind.socket for us.
#
# I do not guaranteee the above would work for all socket units,
# but it works for rpcbind.

  
### Disable unwanted servers ###  

# systemd module refuses to mask services which do not exist, sigh.

- name: "Mask unwanted services"
  file:
    path: "/etc/systemd/system/{{ item }}.service"
    state: link
    src: /dev/null
  with_items: "{{ unwanted_services }}"

- name: "Unwanted services must be masked, for a later task"
  file:
    path: "/etc/systemd/system/{{ item }}.service"
    state: link
    src: /dev/null
  with_items: "{{ unwanted_services }}"
  register: disable_unwanted_servers__mask
  failed_when: disable_unwanted_servers__mask.changed

# Try to disable the service if it is enabled.  Otherwise systemd will
# warn about the mask at boot time.
#
# Ansible 2.5 does not disable masked services correctly.
# (`systemctl disable` does).
# This hack makes a reasonable assumption that enabling foo.service
# adds it as a dependency of multi-user.target.
#
# (Disabling services does *not* make the mask redundant.  The mask
# stops the service being enabled when it is installed, in case
# the service has not been installed yet, and it gets pulled in later
# when the sysadmin installs another package).

- name: "Disable unwanted services"
  file:
    path: "/etc/systemd/system/multi-user.target.wants/{{ item }}.service"
    state: absent
  with_items: "{{ unwanted_services }}"

- name: "Reload systemd config files"
  systemd:
    daemon_reload: yes

    # Ansible 2.2 doesn't let me split out daemon_reload as a separate task.
    # Request that systemd be started.
    name: "init.scope"
    state: started

- name: "Stop unwanted services"
  systemd:
    name: "{{ item }}"
    state: stopped
  with_items: "{{ unwanted_services }}"


### Re-enable wanted servers ###

- name: "Test if any wanted services exist (yet)"
  command: "systemctl cat {{ item }}"
  register: disable_unwanted_servers__exist
  check_mode: no
  changed_when: False
  failed_when: disable_unwanted_servers__exist.rc not in [0, 1]
  with_items: "{{ wanted_services }}"

- name: "Find wanted services which already exist"
  set_fact:
    disable_unwanted_servers__reenable:
      "{{ disable_unwanted_servers__exist.results
              | selectattr('rc', 'equalto', 0) 
              | map(attribute='item')
              | list }}"
  
- name: "Remove masks for wanted service(s)"
  systemd:
    name: "{{ item }}"
    masked: no
  with_items: "{{ disable_unwanted_servers__reenable }}"

# After removing the mask, the service might no longer exist

- name: "Re-test if any wanted services exist (yet)"
  command: "systemctl cat {{ item }}"
  register: disable_unwanted_servers__exist
  check_mode: no
  changed_when: False
  failed_when: disable_unwanted_servers__exist.rc not in [0, 1]
  with_items: "{{ disable_unwanted_servers__reenable }}"

- name: "Find wanted services which already exist"
  set_fact:
    disable_unwanted_servers__reenable:
      "{{ disable_unwanted_servers__exist.results
              | selectattr('rc', 'equalto', 0) 
              | map(attribute='item')
              | list }}"
  
# I see this one does nothing for sysvinit services.
# The disable task doesn't do anything for them either.
# So it all still works... and I don't see the warning
# about masked services either, so it seems to be OK.
#
# Although, as a result, it might look a bit odd
# if you look at exactly which tasks are "changed" :-).
#
- name: "Enable wanted services"
  systemd:
    name: "{{ item }}"
    enabled: yes
  with_items: "{{ disable_unwanted_servers__reenable }}"
  
- name: "Start wanted services"
  systemd:
    name: "{{ item }}"
    state: started
  with_items: "{{ disable_unwanted_servers__reenable }}"
