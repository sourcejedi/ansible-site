- name: RedHat-compatible openssh-server package?
  when: ansible_os_family == "RedHat"
  set_fact: service_ssh_server="sshd"

- name: Debian-compatible openssh-server package?
  when: ansible_os_family == "Debian"
  set_fact: service_ssh_server="ssh"
  #
  # Later investigation shows Debian provides an alias for `sshd`,
  # providing compatibility with RedHat.  However I still want the OS tests,
  # and I like the pattern to handle any variations in names.
  #
  # So I ignore the alias, considering it a convenience for users.
  # It's not really part of some systematic convergence.

- name: Test operating system is supported
  assert:
    that: service_ssh_server is defined


- name: Query - is dpkg package manager used?
  stat: { path: /usr/bin/dpkg }
  register: stat_dpkg

  # Workaround Debian-based package
  #
  # This workaround is specific to Debian-based openssh-server packages.
  # It wants to know *exact* package state, which involves `dpkg-query`.
  # I'm not aware of this or similar workarounds being needed elsewhere,
  # so if we don't have debian-based `dpkg` then we don't need to do it.
  # Taken from debops.sshd.
  #
- when: stat_dpkg.stat.exists
  block:
    - name: Query - is OpenSSH server installed (or half-installed)?
      script: scripts/dpkg-state openssh-server
      register: sshd_prev_dpkg_state
      changed_when: False
      failed_when: sshd_prev_dpkg_state.rc != 0 or
                   sshd_prev_dpkg_state.stdout|trim not in
                     ["not-installed", "config-files",
                      "unpacked", "half-installed", "half-configured",
                      "triggers-pending", "triggers-awaited", "installed"]
      check_mode: False

    - name: Make sure OpenSSH configuration directory exists
      file:
        path: '/etc/ssh'
        state: 'directory'
        mode: '0755'

    - name: Block OpenSSH server from starting immediately when installed
      #
      # SSH server must not start, until security options are configured!
      # http://unix.stackexchange.com/questions/321621/configuring-my-sshd-securely-with-automation
      #
      # However, SSH might already be configured, started, and in use.
      # In this case we should not block it.  Something could try to restart
      # SSH e.g. unattended-upgrades.  We would end up locking ourselves out.
      #
      # In-between states could result from an failed upgrade.  The upgrade is
      # retried when we demand a package be installed.  The service would be
      # restarted, so once again we must not block it.
      #
      # In-between states could also result from a failed install.  We can't
      # tell the difference.  (Note if the failed install was from this role,
      # then we blocked the SSH server already).
      #
      # Users are responsible for avoiding situations, where a retried install
      # starts an SSH server which does not meet their current security
      # requirements.  Again, the trigger for the retry would be an install
      # of _any_ package.  This may be considered further illustration of the
      # problem with how Debian packages work.  It can be prevented by
      # remembering to remove the failed package first.  Fortunately, it is not
      # common for a package to fail to install.
      #
      # The state "config-files" is the result of `apt-get remove` without
      # `--purge`; the SSH server will not be running in this state.
      copy:
        dest: /etc/ssh/sshd_not_to_be_run
        content: |
          This file disables the ssh server.  It was created by debops.sshd.
          This file will be removed when configuration is successfully completed.
      when: sshd_prev_dpkg_state.stdout|trim in
              ["not-installed", "config-files"]


- name: install or update openssh-server
  package: name=openssh-server state=latest
  #
  # `state=present` is normally good enough, and can avoid some time-wasting.
  # Reason for extra caution here, is to avoid enabling an out-of-date ssh server.

- name: create sshlogin group
  group: name=sshlogin state=present

- name: insert/update configuation block in /etc/ssh/sshd_config
  blockinfile:
    dest: /etc/ssh/sshd_config
    insertbefore: BOF  # Insert at start, because earlier lines take precedence
    block: |+
      
      # No brute force attacks
      PasswordAuthentication no
      
      # No root user (unless given command enabled in /root/.ssh/authorized_keys)
      PermitRootLogin forced-commands-only
      
      # SSH users must be whitelisted by admin
      AllowGroups sshlogin root
      
      # No fearmongering about missing DNS ("POSSIBLE BREAK IN ATTEMPT")
      UseDNS no
      
    #end block
  notify: [ 'Test sshd configuration and restart' ]

- name: Remove block on OpenSSH server startup
  file:
    name: '/etc/ssh/sshd_not_to_be_run'
    state: 'absent'
  notify: [ 'Test sshd configuration and restart' ]

- name: Enable ssh server
  service:
    name: "{{ service_ssh_server }}"
    enabled: yes
    state: started

- name: ssh authorized keys
  authorized_key:
    exclusive: yes  # replace existing key, when it is changed
    user: "{{ item.name }}"
    key: "{{ item.sshkey }}"
  with_items: "{{ openssh_server__authkeys }}"
  when: item.sshkey is defined
  loop_control:
    label: "{{ item.name }}"

- name: Add users to sshlogin group
  user:
    name: "{{ item.name }}"
    state: present

    append: true
    groups: sshlogin
  with_items: '{{ openssh_server__authkeys }}'
  loop_control:
    label: "{{ item.name }}"

# In case of SSH config fail on a running server, we want to know NOW.
# Don't wait for the tasks from X other roles in the same play.
- name: Flush handlers (ssh server restart)
  meta: flush_handlers
