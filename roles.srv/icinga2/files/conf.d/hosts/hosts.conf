
# localhost - home server #

object Host "localhost" {
  import "local-host"

  address = "localhost"

  vars.os = "Linux"
  vars.mail = true
}

# gateway - home router #

object Host "gateway" {
  import "generic-host"

  # Magic hostname for default route from nss-myhostname / systemd-resolved
  address = "_gateway"
  # This check is for an IPv4 gateway specifically.
  # We survive without IPv6, but not without IPv4.
  check_command = "ping4"

  # Set to allow alt layout where router is accessed through conduit.
  # See below.
  #
  # Note ping_packets defaults to 5
  vars.ping_wpl = 40
  vars.ping_cpl = 40
  vars.ping_wrta = 125
  vars.ping_crta = 200
  max_check_attempts = 1
  vars.mail = true
}

# test dns resolvers, using "mail.google.com" (hosted same continent) #

template Service "dig mail.google.com" {
  # "dns" checks for a specific answer
  # "dig" checks for any answer from dig
  check_command = "dig"
  vars.dig_server = "$host.address$"
  vars.dig_lookup = "mail.google.com"
}

object Service "dig mail.google.com" {
  import "generic-service"
  import "dig mail.google.com"

  host_name = "gateway"
}


object HostGroup "dns from thephone.coop" {
  assign where match("dns* from thephone.coop", host.name)
}

apply Service "dig mail.google.com" {
  import "external-service"
  import "dig mail.google.com"

  assign where "dns from thephone.coop" in host.groups
}

object Host "dns1 from thephone.coop" {
  import "external-host"

  address = "79.79.79.77"
}

object Host "dns2 from thephone.coop" {
  import "external-host"

  address = "79.79.79.78"
}

# now test reachability of mail.google.com #

object Host "mail.google.com" {
  import "external-host"

  address = "mail.google.com"
}
# no dependency
# only host dependencies are really any good
# we're not using notifications either
# so the question of whether to suppress them or not does not arise

# ISP webserver #

object Host "broadband.yourcoop.coop" {
  import "external-host"

  address = "broadband.yourcoop.coop"

  # No ICMP ping response. Use TCP port for HTTPS.
  check_command = "tcp"
  vars.tcp_port = 443
  vars.tcp_wtime = 0.500
  vars.tcp_ctime = 1.000
}
